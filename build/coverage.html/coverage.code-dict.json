{"/home/travis/build/npmtest/node-npmtest-cordova-icon/test.js":"/* istanbul instrument in package npmtest_cordova_icon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-icon/lib.npmtest_cordova_icon.js":"/* istanbul instrument in package npmtest_cordova_icon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_icon = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_icon = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-icon/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-icon && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_icon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_icon\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_icon.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_icon.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_icon.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_icon.__dirname + '/lib.npmtest_cordova_icon.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-icon/node_modules/cordova-icon/index.js":"var fs     = require('fs-extra');\nvar path   = require('path');\nvar xml2js = require('xml2js');\nvar ig     = require('imagemagick');\nvar colors = require('colors');\nvar _      = require('underscore');\nvar Q      = require('q');\nvar argv   = require('minimist')(process.argv.slice(2));\n\n/**\n * @var {Object} settings - names of the config file and of the icon image\n */\nvar settings = {};\nsettings.CONFIG_FILE = argv.config || 'config.xml';\nsettings.ICON_FILE = argv.icon || 'icon.png';\nsettings.OLD_XCODE_PATH = argv['xcode-old'] || false;\n\n/**\n * Check which platforms are added to the project and return their icon names and sizes\n *\n * @param  {String} projectName\n * @return {Promise} resolves with an array of platforms\n */\nvar getPlatforms = function (projectName) {\n  var deferred = Q.defer();\n  var platforms = [];\n  var xcodeFolder = '/Images.xcassets/AppIcon.appiconset/';\n\n  if (settings.OLD_XCODE_PATH) {\n    xcodeFolder = '/Resources/icons/';\n  }\n\n  platforms.push({\n    name : 'ios',\n    // TODO: use async fs.exists\n    isAdded : fs.existsSync('platforms/ios'),\n    iconsPath : 'platforms/ios/' + projectName + xcodeFolder,\n    icons : [\n      { name : 'icon-40.png',       size : 40  },\n      { name : 'icon-40@2x.png',    size : 80  },\n      { name : 'icon-50.png',       size : 50  },\n      { name : 'icon-50@2x.png',    size : 100 },\n      { name : 'icon-60.png',       size : 60  },\n      { name : 'icon-60@2x.png',    size : 120 },\n      { name : 'icon-60@3x.png',    size : 180 },\n      { name : 'icon-72.png',       size : 72  },\n      { name : 'icon-72@2x.png',    size : 144 },\n      { name : 'icon-76.png',       size : 76  },\n      { name : 'icon-76@2x.png',    size : 152 },\n      { name : 'icon-small.png',    size : 29  },\n      { name : 'icon-small@2x.png', size : 58  },\n      { name : 'icon-small@3x.png', size : 87  },\n      { name : 'icon.png',          size : 57  },\n      { name : 'icon@2x.png',       size : 114 },\n      { name : 'icon-83.5@2x.png',  size : 167 }\n    ]\n  });\n  platforms.push({\n    name : 'android',\n    isAdded : fs.existsSync('platforms/android'),\n    iconsPath : 'platforms/android/res/',\n    icons : [\n      { name : 'drawable/icon.png',       size : 96 },\n      { name : 'drawable-hdpi/icon.png',  size : 72 },\n      { name : 'drawable-ldpi/icon.png',  size : 36 },\n      { name : 'drawable-mdpi/icon.png',  size : 48 },\n      { name : 'drawable-xhdpi/icon.png', size : 96 },\n      { name : 'drawable-xxhdpi/icon.png', size : 144 },\n      { name : 'drawable-xxxhdpi/icon.png', size : 192 },\n      { name : 'mipmap-hdpi/icon.png',  size : 72 },\n      { name : 'mipmap-ldpi/icon.png',  size : 36 },\n      { name : 'mipmap-mdpi/icon.png',  size : 48 },\n      { name : 'mipmap-xhdpi/icon.png', size : 96 },\n      { name : 'mipmap-xxhdpi/icon.png', size : 144 },\n      { name : 'mipmap-xxxhdpi/icon.png', size : 192 }\n    ]\n  });\n  platforms.push({\n    name : 'osx',\n    // TODO: use async fs.exists\n    isAdded : fs.existsSync('platforms/osx'),\n    iconsPath : 'platforms/osx/' + projectName + xcodeFolder,\n    icons : [\n      { name : 'icon-16x16.png',    size : 16  },\n      { name : 'icon-32x32.png',    size : 32  },\n      { name : 'icon-64x64.png',    size : 64  },\n      { name : 'icon-128x128.png',  size : 128 },\n      { name : 'icon-256x256.png',  size : 256 },\n      { name : 'icon-512x512.png',  size : 512 }\n    ]\n  });\n  platforms.push({\n    name : 'windows',\n    isAdded : fs.existsSync('platforms/windows'),\n    iconsPath : 'platforms/windows/images/',\n    icons : [\n      { name : 'StoreLogo.scale-100.png', size : 50  },\n      { name : 'StoreLogo.scale-125.png', size : 63  },\n      { name : 'StoreLogo.scale-150.png', size : 75  },\n      { name : 'StoreLogo.scale-200.png', size : 100 },\n      { name : 'StoreLogo.scale-400.png', size : 200 },\n\n      { name : 'Square44x44Logo.scale-100.png', size : 44  },\n      { name : 'Square44x44Logo.scale-125.png', size : 55  },\n      { name : 'Square44x44Logo.scale-150.png', size : 66  },\n      { name : 'Square44x44Logo.scale-200.png', size : 88  },\n      { name : 'Square44x44Logo.scale-400.png', size : 176 },\n\n      { name : 'Square71x71Logo.scale-100.png', size : 71  },\n      { name : 'Square71x71Logo.scale-125.png', size : 89  },\n      { name : 'Square71x71Logo.scale-150.png', size : 107 },\n      { name : 'Square71x71Logo.scale-200.png', size : 142 },\n      { name : 'Square71x71Logo.scale-400.png', size : 284 },\n\n      { name : 'Square150x150Logo.scale-100.png', size : 150 },\n      { name : 'Square150x150Logo.scale-125.png', size : 188 },\n      { name : 'Square150x150Logo.scale-150.png', size : 225 },\n      { name : 'Square150x150Logo.scale-200.png', size : 300 },\n      { name : 'Square150x150Logo.scale-400.png', size : 600 },\n\n      { name : 'Square310x310Logo.scale-100.png', size : 310  },\n      { name : 'Square310x310Logo.scale-125.png', size : 388  },\n      { name : 'Square310x310Logo.scale-150.png', size : 465  },\n      { name : 'Square310x310Logo.scale-200.png', size : 620  },\n      { name : 'Square310x310Logo.scale-400.png', size : 1240 },\n\n      { name : 'Wide310x150Logo.scale-100.png', size : 310, height : 150  },\n      { name : 'Wide310x150Logo.scale-125.png', size : 388, height : 188  },\n      { name : 'Wide310x150Logo.scale-150.png', size : 465, height : 225  },\n      { name : 'Wide310x150Logo.scale-200.png', size : 620, height : 300  },\n      { name : 'Wide310x150Logo.scale-400.png', size : 1240, height : 600 }\n    ]\n  });\n  // TODO: add missing platforms\n  deferred.resolve(platforms);\n  return deferred.promise;\n};\n\n/**\n * @var {Object} console utils\n */\nvar display = {};\ndisplay.success = function (str) {\n  str = '✓  '.green + str;\n  console.log('  ' + str);\n};\ndisplay.error = function (str) {\n  str = '✗  '.red + str;\n  console.log('  ' + str);\n};\ndisplay.header = function (str) {\n  console.log('');\n  console.log(' ' + str.cyan.underline);\n  console.log('');\n};\n\n/**\n * read the config file and get the project name\n *\n * @return {Promise} resolves to a string - the project's name\n */\nvar getProjectName = function () {\n  var deferred = Q.defer();\n  var parser = new xml2js.Parser();\n  fs.readFile(settings.CONFIG_FILE, function (err, data) {\n    if (err) {\n      deferred.reject(err);\n    }\n    parser.parseString(data, function (err, result) {\n      if (err) {\n        deferred.reject(err);\n      }\n      var projectName = result.widget.name[0];\n      deferred.resolve(projectName);\n    });\n  });\n  return deferred.promise;\n};\n\n/**\n * Resizes, crops (if needed) and creates a new icon in the platform's folder.\n *\n * @param  {Object} platform\n * @param  {Object} icon\n * @return {Promise}\n */\nvar generateIcon = function (platform, icon) {\n  var deferred = Q.defer();\n  var srcPath = settings.ICON_FILE;\n  var platformPath = srcPath.replace(/\\.png$/, '-' + platform.name + '.png');\n  if (fs.existsSync(platformPath)) {\n    srcPath = platformPath;\n  }\n  var dstPath = platform.iconsPath + icon.name;\n  var dst = path.dirname(dstPath);\n  if (!fs.existsSync(dst)) {\n    fs.mkdirsSync(dst);\n  }\n  ig.resize({\n    srcPath: srcPath,\n    dstPath: dstPath,\n    quality: 1,\n    format: 'png',\n    width: icon.size,\n    height: icon.size\n  } , function(err, stdout, stderr){\n    if (err) {\n      deferred.reject(err);\n    } else {\n      deferred.resolve();\n      display.success(icon.name + ' created');\n    }\n  });\n  if (icon.height) {\n    ig.crop({\n      srcPath: srcPath,\n      dstPath: dstPath,\n      quality: 1,\n      format: 'png',\n      width: icon.size,\n      height: icon.height\n    } , function(err, stdout, stderr){\n      if (err) {\n        deferred.reject(err);\n      } else {\n        deferred.resolve();\n        display.success(icon.name + ' cropped');\n      }\n    });\n  }\n  return deferred.promise;\n};\n\n/**\n * Generates icons based on the platform object\n *\n * @param  {Object} platform\n * @return {Promise}\n */\nvar generateIconsForPlatform = function (platform) {\n  display.header('Generating Icons for ' + platform.name);\n  var all = [];\n  var icons = platform.icons;\n  icons.forEach(function (icon) {\n    all.push(generateIcon(platform, icon));\n  });\n  return Promise.all(all);\n};\n\n/**\n * Goes over all the platforms and triggers icon generation\n *\n * @param  {Array} platforms\n * @return {Promise}\n */\nvar generateIcons = function (platforms) {\n  var deferred = Q.defer();\n  var sequence = Q();\n  var all = [];\n  _(platforms).where({ isAdded : true }).forEach(function (platform) {\n    sequence = sequence.then(function () {\n      return generateIconsForPlatform(platform);\n    });\n    all.push(sequence);\n  });\n  Q.all(all).then(function () {\n    deferred.resolve();\n  });\n  return deferred.promise;\n};\n\n/**\n * Checks if at least one platform was added to the project\n *\n * @return {Promise} resolves if at least one platform was found, rejects otherwise\n */\nvar atLeastOnePlatformFound = function () {\n  var deferred = Q.defer();\n  getPlatforms().then(function (platforms) {\n    var activePlatforms = _(platforms).where({ isAdded : true });\n    if (activePlatforms.length > 0) {\n      display.success('platforms found: ' + _(activePlatforms).pluck('name').join(', '));\n      deferred.resolve();\n    } else {\n      display.error('No cordova platforms found. ' +\n                    'Make sure you are in the root folder of your Cordova project ' +\n                    'and add platforms with \\'cordova platform add\\'');\n      deferred.reject();\n    }\n  });\n  return deferred.promise;\n};\n\n/**\n * Checks if a valid icon file exists\n *\n * @return {Promise} resolves if exists, rejects otherwise\n */\nvar validIconExists = function () {\n  var deferred = Q.defer();\n  fs.exists(settings.ICON_FILE, function (exists) {\n    if (exists) {\n      display.success(settings.ICON_FILE + ' exists');\n      deferred.resolve();\n    } else {\n      display.error(settings.ICON_FILE + ' does not exist');\n      deferred.reject();\n    }\n  });\n  return deferred.promise;\n};\n\n/**\n * Checks if a config.xml file exists\n *\n * @return {Promise} resolves if exists, rejects otherwise\n */\nvar configFileExists = function () {\n  var deferred = Q.defer();\n  fs.exists(settings.CONFIG_FILE, function (exists) {\n    if (exists) {\n      display.success(settings.CONFIG_FILE + ' exists');\n      deferred.resolve();\n    } else {\n      display.error('cordova\\'s ' + settings.CONFIG_FILE + ' does not exist');\n      deferred.reject();\n    }\n  });\n  return deferred.promise;\n};\n\ndisplay.header('Checking Project & Icon');\n\natLeastOnePlatformFound()\n  .then(validIconExists)\n  .then(configFileExists)\n  .then(getProjectName)\n  .then(getPlatforms)\n  .then(generateIcons)\n  .catch(function (err) {\n    if (err) {\n      console.log(err);\n    }\n  }).then(function () {\n    console.log('');\n  });\n"}